<?php

/**
 * Generate a 6-digit numeric verification code.
 */
function generateVerificationCode(): string {
    // TODO: Implement this function
    return str_pad(strval(random_int(0, 999999)), 6, '0', STR_PAD_LEFT);
}

/**
 * Send a verification code to an email.
 */
function sendVerificationEmail(string $email, string $code): bool {
    // TODO: Implement this function
    $subject = 'Your Verification Code';
    $headers  = "MIME-Version: 1.0" . "\r\n";
    $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
    $headers .= 'From: no-reply@example.com' . "\r\n";

    $body = "<p>Your verification code is: <strong>$code</strong></p>";

    return mail($email, $subject, $body, $headers);
}

/**
 * Register an email by storing it in a file.
 */
function registerEmail(string $email): bool {
  $file = __DIR__ . '/registered_emails.txt';
    // TODO: Implement this function
    // Normalize email
    $email = trim(strtolower($email));


    // Check if already registered
    if (file_exists($file)) {
        $emails = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        if (in_array($email, $emails)) {
            return false; // Already registered
        }
    }

    // Append email
    $result = file_put_contents($file, $email . PHP_EOL, FILE_APPEND | LOCK_EX);

    return $result !== false;
    
}

/**
 * Unsubscribe an email by removing it from the list.
 */
function unsubscribeEmail(string $email): bool {
    $file = __DIR__ . '/registered_emails.txt';
    // TODO: Implement this function
    $email = trim(strtolower($email));

    if (!file_exists($file)) {
        return false; // File doesn't exist, nothing to remove
    }

    $emails = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $updatedEmails = array_filter($emails, fn($e) => strtolower(trim($e)) !== $email);

    // If the email was not found, return false
    if (count($emails) === count($updatedEmails)) {
        return false;
    }

    // Write back updated list
    $result = file_put_contents($file, implode(PHP_EOL, $updatedEmails) . PHP_EOL, LOCK_EX);

    return $result !== false;

}

/**
 * Fetch GitHub timeline.
 */
function fetchGitHubTimeline() {
    // TODO: Implement this function
     $url = 'https://www.github.com/timeline';

    // Initialize cURL
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERAGENT, 'PHP-cURL'); // GitHub requires User-Agent

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($httpCode === 200 && $response !== false) {
         // Return raw HTML as string (not JSON)
        return $response;
    }

    return null;
}

/**
 * Format GitHub timeline data. Returns a valid HTML sting.
 */
function formatGitHubData(array $data): string {
    // TODO: Implement this function
      // Start HTML email structure
    $html = '<h2>GitHub Timeline Updates</h2>';
    $html .= '<table border="1">';
    $html .= '<tr><th>Event</th><th>User</th></tr>';

    foreach ($data as $event) {
        // Sanitize input
        $type = isset($event['type']) ? htmlspecialchars($event['type']) : 'N/A';
        $user = isset($event['user']) ? htmlspecialchars($event['user']) : 'Unknown';

        $html .= "<tr><td>{$type}</td><td>{$user}</td></tr>";
    }

    $html .= '</table>';

    // Placeholder unsubscribe link to be replaced dynamically before sending email
    $html .= '<p><a href="unsubscribe_url" id="unsubscribe-button">Unsubscribe</a></p>';

    return $html;
}

/**
 * Send the formatted GitHub updates to registered emails.
 */
function sendGitHubUpdatesToSubscribers(): void {
  $file = __DIR__ . '/registered_emails.txt';
    // TODO: Implement this function 

    if (!file_exists($file) || !is_readable($file)) {
        return;
    }

    $emails = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    if (empty($emails)) {
        return;
    }

    $timelineData = fetchGitHubTimeline();
    if (empty($timelineData) || !is_array($timelineData)) {
        return;
    }

    $htmlBodyTemplate = formatGitHubData($timelineData);

    
    // Prepare the HTML table with events and users
    $html = '<h2>GitHub Timeline Updates</h2>';
    $html .= '<table border="1">';
    $html .= '<tr><th>Event</th><th>User</th></tr>';

    foreach ($timelineData as $event) {
        $type = isset($event['type']) ? htmlspecialchars($event['type']) : 'N/A';
        $user = isset($event['actor']['login']) ? htmlspecialchars($event['actor']['login']) : 'Unknown';
        $html .= "<tr><td>$type</td><td>$user</td></tr>";
    }
    $html .= '</table>';

    // Loop through each email and send the updates
    foreach ($emails as $email) {
        $email = trim($email);
        if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
            continue;
        }

        // Build unsubscribe URL inline â€” must url-encode email and point to unsubscribe.php
        $unsubscribeUrl = 'https://yourdomain.com/src/unsubscribe.php?email=theusersemail@example.com' . urlencode($email);

          // Append unsubscribe link with required ID inside the email body
        $emailBody = $html . '<p><a href="' . $unsubscribeUrl . '" id="unsubscribe-button">Unsubscribe</a></p>';

        $headers = "MIME-Version: 1.0\r\n";
        $headers .= "Content-type: text/html; charset=UTF-8\r\n";
        $headers .= "From: no-reply@example.com\r\n";
    // Email subject
        $subject = "Latest GitHub Updates";

        // Send email
        mail($email, $subject, $htmlBody, $headers);
    }
}
